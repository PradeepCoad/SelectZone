@model FileMaster;
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">SelectZone</h1>
    <p>Upload any image</p>
</div>

<div class="container-fluid">
    <div class="row">
        <div class="col-sm-12">
            <div class="card">
                <form asp-controller="Home" asp-action="FileMaster" class="needs-validation" method="post" enctype="multipart/form-data" novalidate="">
                    <div class="card-body" id="form-sections-container">
                        
                        <br />
                        @*Drag and drop file *@
                        <div class="col" >
                            <label class="form-label" for="uploadImage">Upload Files</label>

                            <div  class="drop-area" id="drop-area">
                                <div class="image-preview" id="image-preview"></div>
                                <p>Drag & Drop your file here</p>
                                <input type="file" id="file-input" class="file-input" name="Files" multiple>
                                <p id="drop-error-message" class="drop-error-message"></p>
                            </div>
                        </div>
                    </div>

                    <!-- Bootstrap Modal -->
                    <div class="modal fade" id="imageModal" tabindex="-1" role="dialog" aria-labelledby="imageModalLabel" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="imageModalLabel">Image Preview</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <img src="" id="modalImage" class="img-fluid" alt="Preview">
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Confirm Validation-->

                    <div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="confirmationModalLabel">Confirm Delete</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    Are you sure you want to delete this file?
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-primary" id="confirmDelete">Yes, Delete</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card-footer text-end">
                        <button class="btn btn-primary" type="submit">Save</button>
                        <button class="btn btn-secondary" type="reset">Clear</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="container mt-5">
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <div class="input-group">
                <input name="date" type="date" id="date_for_file" class="form-control" value="@DateTime.Today.ToString("yyyy-MM-dd")">
                <div class="input-group-append">
                    <button type="button" class="btn btn-primary" onclick="getFilesByDate(document.getElementById('date_for_file').value)">Show Gallery</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="col">
    <label class="form-label">Your Files</label>
    <div class="preview-area" id="preview-area">
        <div class="file-preview" id="file-preview"></div>
    </div>
</div>


<script>


    //<!-- #drag-and-drop -->

        const dropArea = document.getElementById('drop-area');
        const imagePreview = document.getElementById('image-preview');
        const errorMessage = document.getElementById('drop-error-message');
        const fileInput = document.getElementById('file-input');


        //accepted file formate into file upload section
        const validFileTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf', 'application/x-pdf', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'text/plain', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];
        const maxFileSize = 20 * 1024 * 1024;

        let allFiles = []; //make a list of all files uploaded

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        dropArea.addEventListener('drop', handleDrop, false);
        dropArea.addEventListener('click', handleClick, false);

        //take file input whene user click on upload file section
        function handleClick() {
            console.log('Drop area clicked');
            fileInput.click();
        }

        fileInput.addEventListener('change', (e) => {
            const files = e.target.files;
            handleFiles(files);
        });

        //take file input whene user drag or drop on upload file section
        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            handleFiles(files);
        }


        //Handel File
        function handleFiles(files) {
            errorMessage.textContent = '';  // Clear previous error messages
            ([...files]).forEach(file => {
                if (validFileTypes.includes(file.type) && file.size < maxFileSize) {
                    allFiles.push(file);

                    previewFile(file); //it will create preview of file when successfully uploaded

                } else if (file.size > maxFileSize) {
                    errorMessage.textContent = `File is too large: ${file.name} (max 20MB)`;
                } else {
                    errorMessage.textContent = `Invalid file type: ${file.name}`;
                }
            });
            updateFileInput();
        }

        //create file preview on upload file section

        function previewFile(file) {
            console.log(file);
            const fileDiv = document.createElement('div');
            fileDiv.classList.add('file-item');
            fileDiv.addEventListener('click', (e) => {
                e.stopPropagation();
                showModal(file); //Show model on clicking image
            });

            const fileInfo = document.createElement('div');
            fileInfo.classList.add('file-info'); // Create file information div to show file name and size
            fileInfo.textContent = `${file.name} (${formatFileSize(file.size)})`; // formateFileSize use to convert file size


            //Remove button to remove file from upload file section
            const removeBtn = document.createElement('button');
            removeBtn.classList.add('remove-btn');
            removeBtn.textContent = '×';
            removeBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                imagePreview.removeChild(fileDiv);
                removeFile(file);//remove file from file list
                console.log(`File removed: ${file.name}`);

            });


            // check file type to make preview
            if (file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onloadend = function () {
                    const img = document.createElement('img');
                    img.src = reader.result;
                    fileDiv.appendChild(img);
                    fileDiv.appendChild(fileInfo);
                    fileDiv.appendChild(removeBtn);
                    imagePreview.appendChild(fileDiv);
                    console.log(`File accepted: ${file.name}`);
                }
            } else if (file.type.startsWith('application/') || file.type.startsWith('text/')) {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onloadend = function () {
                    const i = document.createElement('i');

                    if (file.type == 'application/pdf' || file.type == 'application/x-pdf') {
                        i.className = "fa fa-file-pdf-o fa-5x";
                    } else if (file.type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') {
                        i.className = "fa fa-file-excel-o fa-5x";
                    } else if (file.type == 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
                        i.className = "fa fa-book fa-5x";
                    } else if (file.type == 'text/plain') {
                        i.className = "fa fa-file-text-o fa-5x";
                    }
                    fileDiv.appendChild(fileInfo);
                    fileDiv.appendChild(i);
                    fileDiv.appendChild(removeBtn);
                    imagePreview.appendChild(fileDiv);
                    console.log(`File accepted: ${file.name}`);
                }
            }
        }

        //It's use to add file data into allFile[]


        function updateFileInput() {
            const dataTransfer = new DataTransfer();
            allFiles.forEach(file => dataTransfer.items.add(file));
            fileInput.files = dataTransfer.files;
            console.log('Updated file input files:', fileInput.files);
        }

        //It's use to remove file data into allFile[]

        function removeFile(file) {
            allFiles = allFiles.filter(f => f !== file);
            console.log(`File removed: ${file.name}`);
            updateFileInput();
        }

        //It's use to formate file size

        function formatFileSize(size) {
            if (size === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            const i = Math.floor(Math.log(size) / Math.log(k));
            return parseFloat((size / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }


        //model show on screen with image
        function showModal(file) {
            if (file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onloadend = function () {
                    modalImage.src = reader.result;
                    $('#imageModal').modal('show');
                }
            } else {
                //it will open file if it's not image in new tab
                const reader = new FileReader();
                reader.onloadend = function () {
                    const blob = new Blob([reader.result], { type: file.type });
                    const url = URL.createObjectURL(blob);
                    window.open(url);
                }
                reader.readAsArrayBuffer(file);
            }
        }

    //<!-- #drag-and-drop -->








    //preview area
    const previewArea = document.getElementById('preview-area');
    const filePreview = document.getElementById('file-preview');


    function editFileStatus(amdID) {
        fetch('/Home/FileStatusUpdate?amdID=' + amdID)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error removing file details.');
                }
                console.log('checked......');
                return response.json();
            })
            .catch(error => {

                console.log('error', error.error);
                // document.getElementById('ExtralargeModal').style.display = "block";
            });
    }

    function getFilesByDate(date) {
        fetch('/Home/getFilesData?date=' + date)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error fetching material master details.');
                }
                return response.json();
            })
            .then(data => {
                console.log("Items Master ", data);

                while (filePreview.firstChild) {
                    filePreview.removeChild(filePreview.firstChild);
                }

                data.forEach(fileData => {
                    previewExistingFile(fileData);
                });

            })
            .catch(error => {
                console.error('Error:', error);
            });
    }


    function previewExistingFile(fileData) {
        console.log(fileData);

        const fileDiv = document.createElement('div');
        fileDiv.classList.add('file-item');
        fileDiv.addEventListener('click', (e) => {
            e.stopPropagation();
            showModalForExistingFile(fileData); // Show modal on clicking the file item
        });

        const fileID = document.createElement('input');
        fileID.classList.add('fileID');
        fileID.value = fileData.amdID;
        fileID.type = 'hidden';

        const fileInfo = document.createElement('div');
        fileInfo.classList.add('file-info');
        fileInfo.textContent = `${getFileName(fileData.docPath)}`;


        const removeBtn = document.createElement('button');
        removeBtn.type = "button";
        removeBtn.classList.add('remove-btn');
        removeBtn.textContent = '×';
        removeBtn.addEventListener('click', (e) => {
            e.stopPropagation();

            $('#confirmationModal').modal('show');

            // Set up confirmation actions
            document.getElementById('confirmDelete').onclick = function () {
                editFileStatus(fileData.amdID);
                filePreview.removeChild(fileDiv);
                $('#confirmationModal').modal('hide');
                console.log(`File removed: ${getFileName(fileData.docPath)}`);
            };
        });

        // Check file type based on extension
        const fileExtension = getFileExtension(fileData.docPath);

        if (fileExtension.match(/(jpg|jpeg|png|gif)$/i)) {
            // Image file handling
            const img = document.createElement('img');
            img.src = convertToImageURL(fileData.data);
            img.alt = 'Preview Image';
            fileDiv.appendChild(img);
            fileDiv.appendChild(fileID);
            fileDiv.appendChild(fileInfo);
            fileDiv.appendChild(removeBtn);
            filePreview.appendChild(fileDiv);
            console.log(`File accepted: ${getFileName(fileData.docPath)}`);
        } else {
            // Non-image file handling
            const i = document.createElement('i');
            if (fileExtension === 'pdf') {
                i.className = "fa fa-file-pdf-o fa-5x";
            } else if (fileExtension === 'xlsx') {
                i.className = "fa fa-file-excel-o fa-5x";
            } else if (fileExtension === 'docx') {
                i.className = "fa fa-book fa-5x";
            } else if (fileExtension === 'txt') {
                i.className = "fa fa-file-text-o fa-5x";
            }

            fileDiv.appendChild(i);
            fileDiv.appendChild(fileID);
            fileDiv.appendChild(fileInfo);
            fileDiv.appendChild(removeBtn);
            filePreview.appendChild(fileDiv);
            console.log(`File accepted: ${getFileName(fileData.docPath)}`);
        }
    }

    // Helper function to convert base64 data to a valid image URL
    function convertToImageURL(base64Data) {
        return `data:image/jpeg;base64,${base64Data}`;
    }

    // Helper function to extract the file name from the file path
    function getFileName(filePath) {
        return filePath.split('\\').pop();
    }

    // Helper function to extract the file extension from the file path
    function getFileExtension(filePath) {
        return filePath.split('.').pop().toLowerCase();
    }


    function showModalForExistingFile(fileData) {
        const fileExtension = getFileExtension(fileData.docPath);

        if (fileExtension.match(/(jpg|jpeg|png|gif)$/i)) {
            // Image file handling
            const imageURL = convertToImageURL(fileData.data);
            modalImage.src = imageURL;
            $('#imageModal').modal('show');
        } else if (fileExtension.match(/(pdf)$/i)) {
            // PDF file handling
            const pdfData = atob(fileData.data); // Decode base64
            const blob = new Blob([new Uint8Array(Array.from(pdfData, c => c.charCodeAt(0)))], { type: 'application/pdf' });
            //const blob = new Blob([pdfData], { type: 'application/pdf' });
            const url = URL.createObjectURL(blob);

            // Open PDF in a new tab
            window.open(url, '_blank');
        } else if (fileExtension.match(/(txt)$/i)) {
            // Text file handling
            const textData = atob(fileData.data); // Decode base64
            const blob = new Blob([textData], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);

            // Open text file in a new tab
            window.open(url, '_blank');
        } else if (fileExtension.match(/(xls|xlsx)$/i)) {
            // Excel file handling
            const excelData = atob(fileData.data); // Decode base64
            const byteArray = new Uint8Array(excelData.length);

            for (let i = 0; i < excelData.length; i++) {
                byteArray[i] = excelData.charCodeAt(i);
            }

            const blob = new Blob([byteArray], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
            const url = URL.createObjectURL(blob);

            // Open Excel file in a new tab
            window.open(url, '_blank');
        } else if (fileExtension.match(/(docx)$/i)) {
            // DOCX file handling
            const docxData = atob(fileData.data); // Decode base64
            const byteArray = new Uint8Array(docxData.length);

            for (let i = 0; i < docxData.length; i++) {
                byteArray[i] = docxData.charCodeAt(i);
            }

            const blob = new Blob([byteArray], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });
            const url = URL.createObjectURL(blob);

            // Open DOCX file in a new tab
            window.open(url, '_blank');
        }
        else {
            // Handle other file types here
            alert('Unsupported file type');
        }
    }
</script>